#!/bin/bash

DEV=/dev/sdc                    # where your 'Live USB' mounted. Use fdisk for more info
USER=`whoami`                   #
PASSWD=kali                     # user password. You can change it for more security
BOX_DIR=/media/$USER/box        # path to additional partition for saving data

BOX_DEVPART="$DEV"3
BOX_HOME=$BOX_DIR/home/$USER
BOX_BRW_DIR=$BOX_DIR/home/.config/chromium
BOX_LOCAL=$BOX_HOME/.local
BOX_PATH=$BOX_DIR/bin:$BOX_LOCAL/bin
BOX_CONFIG=$BOX_HOME/.box-config
VERSION=2.0

BOX_ROOT=(
    $BOX_DIR/bin
    $BOX_DIR/var
    $BOX_DIR/etc
    $BOX_DIR/home
)
BOX_DIRS=(
    # user dirs
    $BOX_HOME/cockroach               # my private place
    $BOX_HOME/dump                    # git repo where I save unfinished projects

    $BOX_HOME/git                     # rest of git repos
    $BOX_HOME/shared                  # shared directory with my local server
    $BOX_HOME/priv                    # my private zone for credentials, data, etc
    $BOX_HOME/garbage                 # to store garbage files and peice of code
    $BOX_HOME/.local                  # user programs
    $BOX_HOME/.ssh                    # ssh keys
    $BOX_HOME/.config/chromium        # browser metadata
    $BOX_HOME/.config/sublime-text-3  # IDE metadata
    $BOX_HOME/.anydesk
)
BOX_FILES=(
    $BOX_HOME/.git-credentials
    $BOX_HOME/.gitconfig
    $BOX_HOME/.wreck            # config file for my util program
)

ARGC=$#



_box_usage_cmd()
{
    CMD=$1
    case $CMD in
        init )
            echo "usage: box init"
            echo ""
            ;;
        set )
            echo "usage: box set"
            echo ""
            ;;
        free)
            echo "usage: box free [option]"
            echo "     1                    cleaning degree 1"
            echo "     2                    cleaning degree 2"
            #echo "     3                    cleaning degree 3"
            ;;
        pkg)
            echo "usage: box pkg [option]"
            echo "    -d               download package from internet"
            echo "    -b               back up package from system into box env"
            echo "    -c               clean up package from box env"
            echo "    -r               restore package into system using copy or link"
            ;;
        util)
            echo "usage: box util [option]"
            echo "    conn               connect to local server"
            echo "    send               send file to local server"
            echo "    halt               unset and unlink files and then halt machine"
            ;;
        browser)
            echo "    -r               restore saved credentials from archive"
            echo "    -c               delete saved credentials"
            ;;
        unset )
            echo "usage: box unset [option]"
            echo "    -f               unset file links only"
    esac
}


box_usage()
{
    if [[ $1 != '' ]]; then
        _box_usage_cmd $1
        return 0
    fi

    echo "Usage: box [-v] [-h] <command> [<args>]"
    echo -e "These are common box command used in various situations: \n"
    echo "major box environment"
    echo "   init                initialize box environment"
    echo "   set                 set changes on machine choosen by user"
    echo "   unset               unset changes on machine choosen by user"
    echo ""
    echo "regularly used command during work (box's utils)"
    echo "   free                free RAM memory from garbage"
    echo "   pkg                 download, install, uninstall packages"
    echo "   util                util useful for me"
    echo "   brws                tools for backup, adjust browser's meta data"
    echo ""
    echo "Options:"
    echo " -h                    give this help list"
    echo " -v                    show box version"
}

box_init()
{
    _init_user_prompt && test $? -eq 0 || exit 1

    echo "  Make disk partitioin"
    sudo wipefs --all --force $BOX_DEVPART
    echo -e 'n\n \n \n \n \n p\n w\n' | sudo fdisk $DEV
    sudo mkfs.ext4 $BOX_DEVPART
    sudo e2label $BOX_DEVPART box
    test -e $BOX_DIR || sudo mkdir -p $BOX_DIR
    sudo mount $BOX_DEVPART $BOX_DIR
    sudo chown $USER:$USER -R $BOX_DIR
    rm -rf $BOX_DIR/*

    _init_fs_struct 0 && test $? -eq 0 || exit 1

    _init_save_git_creden
    _init_save_new_passwd
    _init_save_box_itself
}

box_set()
{
    _set_update_session

    printf "Set date and time: "
    DATE=$(curl -sI google.com | grep -i date | cut -f 3,4,5,6 -d ' ')
    printf '\n ' && sudo date --set="$DATE -2 hours" && echo

    _set_devs
    _set_datalinks
    _set_daemons

    test $SHLVL -eq 1 && exec $SHELL
    echo
}


box_free()
{
    if [[ $1 -lt 0 ]]; then
        echo "Warning: Use only positive numbers instead of '$1'"
        exit 1
    fi
    if [[ $1 -eq 3 ]]; then
        echo "Warning: Using third degree for freeing memory is depricated"
        exit 1
    fi
    if [[ $1 -gt 3 ]]; then
        echo "Error: there are only 2 degrees of freeing memory."
        echo "Warning: Third is depricated"
        exit 1
    fi

    sudo sysctl vm.drop_caches=$1
    echo && free -h
}

box_packages()
{
    echo "Deal with packages"
    case $1 in
        download )
            _package_download $1 ;;
        backup )
            _package_backup   $1 ;;
        cleanup )
            _package_cleanup  $1 ;;
        restore )
            _package_restore  $1 ;;
    esac
}

box_utils()
{
    NAME=server
    IP=192.168.0.104
    PASSWD=server98
    DIR=/home/server/dgarb/shared

    (sudo systemctl | grep -q ssh.service) || sudo service ssh start

    case $1 in
        conn )
            sshpass -p $PASSWD ssh $NAME@$IP
            test $? -eq 6 && ssh server@$IP
            ;;
        send )
            printf "Enter dir/file name: " && read filepath

            if [[ -d $filepath || -f $filepath ]]; then
                sshpass -p $PASSWD scp -r $filepath server@$IP:$DIR
            else
                printf "scp: cannot access \`$filepath': "
                printf "No such file or directory\n"
                exit
            fi
            ;;
        halt )
            # kill user apps before unlink
            killall chromium sublime_text
            box_unset
            sleep 8
            echo "shutdown local server"
            ssh serv "sudo sshpass -p server98 shutdown now"
            echo "shutdown local machine"
            sudo shutdown -h now
            ;;
    esac
}

box_browser()
{
    DEST=.config/chromium
    
    echo "browser"
    if [[ ! -d ~/priv/creden ]]; then
        echo "Download credentials from Mega"
        exit 1
    fi
    rm -rf $BOX_HOME/$DEST 
    rm -rf ~/$DEST            # symbolic link
    cp -rf ~/priv/creden/$DEST $BOX_HOME/.config
    ln -s $BOX_HOME/$DEST $HOME/$DEST
    echo " $DEST"
}

box_unset()
{
    echo "Unset symbolic links"
    for d in ${BOX_DIRS[@]}; do
        DEST=${d#"$BOX_HOME/"}
        test -L $DEST && unlink ~/$DEST
        echo " ~/$DEST"
    done
    for f in ${BOX_FILES[@]}; do
        DEST=${f#"$BOX_HOME/"}
        test -L $DEST && unlink ~/$DEST
        echo " ~/$DEST"
    done
}



_init_user_prompt()
{
    echo "Init disk partition"
    test -z $_DEV || DEV=$_DEV && test -b $DEV # && echo "OK $DEV" || echo "ERR $DEV"

    if [[ $? -eq 1 ]]; then
        echo -e "  Error: no such disk device \`$DEV'"
        return 1
    fi

    printf "  Do you want to format \`box\` disk partition? [y/N] " && read anw
    if [[ $anw != 'yes' ]]; then
        echo "Abort" && return 1
    fi

    if [[ -d $BOX_DIR ]]; then
        echo "  Warning: \`box\` partitioin exists already."
        printf "  Do you want to format \`box\` partitioin anyway? [y/N] " && read anw
        if [[ $anw != 'yes' ]]; then
            echo "Abort"
            return 1
        fi
        echo -e "\n  Format disk partitioin"
    fi
    return 0;
}

_init_fs_struct()
{
    if [[ $# -eq 0 ]]; then
        echo "Error: missing argument in _init_fs_struct"
        return 1
    fi

    if [[ $1 -eq 0 ]]; then
        echo "  Make system directories"
        for item in ${BOX_ROOT[@]}; do
            echo "$item" && mkdir -p $item;
        done
    fi
    echo "  Make user directories"
    for item in ${BOX_DIRS[@]}; do
        echo "$item" && mkdir -p $item;
    done
    for item in ${BOX_FILES[@]}; do
        echo "$item" && touch $item
    done
    echo
}

_init_save_new_passwd()
{
    printf "Default password: " && read _DEF_PASSWD
    printf "New password: "     && read _NEW_PASSWD

    if [[ $_DEF_PASSWD == '' || $_NEW_PASSWD == '' ]]; then
        echo -e "Error: password is empty\n"
        _init_save_new_passwd
    fi
    echo "$_DEF_PASSWD:$_NEW_PASSWD" > $BOX_HOME/.box-credentials
}

_init_save_git_creden()
{
    echo "Init git credentials"
    printf " git email  : " && read GIT_EMAIL
    printf " git name   : " && read GIT_NAME
    printf " git passwd : " && read GIT_PASSWD
    if [[ $GIT_EMAIL == '' || $GIT_NAME == '' || $GIT_PASSWD == '' ]]; then
        echo " email, name or password is empty"
        _init_save_git_creden
    fi
    git config --global user.email $GIT_EMAIL
    git config --global user.name  $GIT_NAME
    git config --global credential.helper store
    echo "https://$GIT_NAME:$GIT_PASSWD@github.com" > ${BOX_FILES[1]};
    echo
}

_init_save_box_itself()
{
    BOX=$(find . -type f -name box | head -n 1)
    echo "    [-] box saving"
    cp $BOX "$BOX".sh $BOX_DIR/bin
    echo
}


_set_devs()
{
    echo "Set devices parameters"
    echo " keyboard"
    setxkbmap -option grp:alt_shift_toggle us,ru

    echo " monitor"
    xset s off # don't activate screensaver
    xset -dpms # disable DPMS (Energy Star) features.
    #xset s noblank # don't blank the video device
    xrandr | grep 'VGA-1 disconnected' -q
    if [[ $? -eq 1 ]];then
        xrandr --output LVDS-1 --off
    fi

    echo " stereo"
    pactl set-sink-mute   alsa_output.pci-0000_00_1b.0.analog-stereo 0
    pactl set-sink-volume alsa_output.pci-0000_00_1b.0.analog-stereo 70%
    echo
}

_set_daemons()
{
    echo "Start deamons"

    echo " box's crontab activated"
    crontab $BOX_CONFIG/box_crontab

    # redb gets activated by crontab
    echo " redb activated (running)"

    echo " ssh activated (running)"
    sudo systemctl start ssh.service

    echo
}

_set_datalinks()
{
    # make symbolic links
    echo "Make links to files"

    # delete some dirs
    rm -rf $HOME/.local

    for d in ${BOX_DIRS[@]}; do
        DEST=${d#"$BOX_HOME/"}
        test -e $HOME/$DEST || ln -s $BOX_HOME/$DEST $HOME/$DEST
        echo "~/$DEST"
    done
    for f in ${BOX_FILES[@]}; do
        DEST=${f#"$BOX_HOME/"}
        test -e $HOME/$DEST || ln -s $BOX_HOME/$DEST $HOME/$DEST
        echo "~/$DEST"
    done
    echo
}

_set_update_session()
{
    # have to make some checking before update .bashrc
    # and system at all (deamons, .configs, etc)
    echo "Session updated"
    if [[ $(grep  "# box part" ~/.bashrc) != '' ]]; then
        return ;
    fi
    echo -e "\n# box part"             >> ~/.bashrc
    echo "PATH=$BOX_PATH:\$PATH"       >> ~/.bashrc
    echo "export PATH"                 >> ~/.bashrc
    echo "source $BOX_DIR/bin/box.sh"  >> ~/.bashrc
    sudo cp ~/.bashrc /root

    PATH=$BOX_PATH:$PATH
    export PATH
    echo
}


# 2 - package exists on system
# 1 - package does not exist on box env
# 0 - package exists on both side
_package_check()
{
    PKG=$1
    if [[ ! -f /usr/bin/$PKG ]]; then
        return 2
    fi

    # check if we have directory for backed up packages
    if [[ ! -d $BOX_DIR/usr/bin ]]; then
        mkdir -p $BOX_DIR/usr/bin
    fi

    # check if package has already saved
    if [[ ! -f $BOX_DIR/usr/bin/$PKG ]]; then
        return 1
    fi
    return 0
}

_package_download()
{
    echo "Install user packages"
    SUBLIME_TEXT_URL=https://download.sublimetext.com
    SUBLIME_TEXT_TAR=sublime_text_3_build_3211_x32.tar.bz2
    TELEGRAM_URL=https://telegram.org/dl/desktop/linux32
    TELEGRAM_TAR=telegram.tar.xz
    PARTICLE_URL=https://github.com/qcockroach/particle/archive/main.zip
    PARTICLE_TAR=particle-main

    mkdir -p $BOX_LOCAL/bin
    wget -q --show-progress $SUBLIME_TEXT_URL/$SUBLIME_TEXT_TAR --output-document $SUBLIME_TEXT_TAR 
    tar -xf $SUBLIME_TEXT_TAR && rm -rf $SUBLIME_TEXT_TAR
    (mv sublime_text_3/* $BOX_LOCAL/bin || echo "package is already installed") && rm -rf sublime_text_3

    wget -q --show-progress $TELEGRAM_URL --output-document $TELEGRAM_TAR
    tar -xf $TELEGRAM_TAR && rm -rf $TELEGRAM_TAR
    (mv Telegram/* $BOX_LOCAL/bin || echo "package is already installed") && rm -rf Telegram

    wget -q --show-progress $PARTICLE_URL --output-document $PARTICLE_TAR.zip
    unzip -q $PARTICLE_TAR && cd $PARTICLE_TAR/wd
    make -s init && make -s && make -s install && cd ../..
    rm -rf $PARTICLE_TAR*

    printf "sshpass"
    sudo apt-get update
    sudo apt-get install sshpass -y
    sudo cp /usr/bin/sshpass $BOX_DIR/bin
    echo
}

_package_backup()
{
    PKG=$1
    echo "Package name: $PKG"

    _package_check $PKG
    local ret=$?
    if [[ $ret -eq 2 ]]; then
        echo "Error: package '$PKG' does not exist on system"
        exit 1
    elif [[ $ret -eq 0 ]]; then
        echo "Warning: package '$PKG' has already saved: $ret"
        exit 0
    fi

    # save logs for link at next time
    echo $(whereis $PKG) >> $BOX_DIR/etc/box/pkgconfig

    for i in $(whereis $PKG | tr -s ': ' ' ' | cut -f 2- -d ' '); do
        echo $i
        mkdir -p $BOX_DIR/$(dirname $i)
        sudo cp -r $i $BOX_DIR/$(dirname $i)
    done
    echo "Package '$PKG' saved on box"

    # make 'kali' user owner of every saved files
    sudo chown -R kali:kali $BOX_DIR/usr
}

_package_cleanup()
{
    PKG=$1
    echo "Package name: $PKG"

    _package_check $PKG
    ret=$?
    if [[ $ret -eq 2 ]]; then
        echo "Error: package '$PKG' does not exist on system"
        exit 1
    elif [[ $ret -eq 1 ]]; then
        echo "Warning: package '$PKG' has already cleaned"
        exit 0
    fi

    echo "Clean up previosly saved package '$PKG'"
    for i in $(whereis $PKG | tr -s ': ' ' ' | cut -f 2- -d ' '); do
        echo $i
        rm -rf $BOX_DIR$i
    done

    # delete package name from pkgconfig file too
    cat $BOX_DIR/etc/box/pkgconfig | grep -v "$PKG:" > $BOX_DIR/etc/box/.tmp
    cat $BOX_DIR/etc/box/.tmp > $BOX_DIR/etc/box/pkgconfig
}

_package_restore()
{
    PKG=$1
    echo "Package name: $PKG"

    _package_check $PKG
    ret=$?
    if [[ $ret -eq 0 ]]; then
        echo "Warning: package '$PKG' is already on system"
        exit 0
    elif [[ $ret -eq 1 ]]; then
        echo "Warning: package '$PKG' does not exists on box env"
        exit 0
    fi

    items=($(cat $BOX_DIR/etc/box/pkgconfig |  grep $PKG | tr -s ': ' ' ' | cut -f 2- -d ' '))
    for i in ${items[@]}; do
        echo $i
        sudo cp -rf $BOX_DIR$i $i
    done
}



case $1 in
    init)
        shift 1
        box_init
        ;;
    set)
        shift 1
        box_set 
        ;;
    unset)
        shift 1
        box_unset
        ;;

    free)
        shift 1
        box_free $1
        ;;
    pkg)
        shift 1
        while getopts ":db:c:r:" opt; do
            case ${opt} in
            d)
                _package_download ;;
            b)
                _package_backup $OPTARG ;;
            c)
                _package_cleanup $OPTARG ;;
            r)
                _package_restore $OPTARG ;;
            esac
        done
        ;;
    util)
        shift 1
        while getopts ":tcsH" opt; do
            case ${opt} in
            c)
                box_utils conn ;;
            s)
                box_utils send ;;
            # H)
            #     box_utils halt ;;
            esac
        done
        ;;

    -h)
        shift 1
        box_usage $1
        ;;
    -v)
        echo "box version $VERSION"
        ;;
esac

if [[ $ARGC -eq 0 ]]; then
    box_set
fi
