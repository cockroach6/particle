#!/bin/bash

# User defined variables
# Please, make sure you specified them for machine
# to avoid unnecessary problems

DEV=/dev/sdc                    # where your 'Live USB' mounted. Use fdisk for more info
USER=`whoami`                   # machine user name
PASSWD=kali                     # user password. You can change it for more security
BOX_DIR=/media/$USER/box        # path to your extended partition for saving data

BOX_DEVPART="$DEV"3
BOX_HOME=$BOX_DIR/home
BOX_BRW_DIR=$BOX_DIR/home/.config/chromium
BOX_LOCAL=$BOX_HOME/.local
BOX_PATH=$BOX_DIR/bin:$BOX_LOCAL/bin:\$PATH
BOX=$(echo $(pwd)$(find . -type f -name 'box') | tr -d '.')
VERSION=2.3

BOX_ROOT=(
    $BOX_DIR/bin
    $BOX_DIR/var
    $BOX_DIR/etc
    $BOX_DIR/home
)
BOX_DIRS=(
    $BOX_HOME/git               # rest of git repos
    $BOX_HOME/dump              # git repo where I save unfinished projects
    $BOX_HOME/shared            # shared directory with my local server
    $BOX_HOME/Downloads         # to not lose downloaded data after reboot machine
    $BOX_HOME/.local            # user programs
    $BOX_HOME/.config/chromium  # browser data
#   $BOX_HOME/.ssh              # ssh keys
#   $BOX_HOME/xunison           # projects for job
)
BOX_FILES=(
    $BOX_HOME/.box-credentials  # config file for my box program
    $BOX_HOME/.git-credentials
    $BOX_HOME/.gitconfig
    $BOX_HOME/.wreck            # config file for my util program
)

box_usage()
{
    echo "Usage: box [option]"
    echo "Options:"
    echo " -i                    init box environment"
    echo " -s                    set box environment (default)"
    echo " -c                    free box RAM memory"
    echo " -d                    debug box: reset"
    echo " -u                    user utils: conn, send, pkgs, halt"
    echo " -h                    give this help list"
    echo " -v                    show box version"
}


box_init()
{
    _init_user_prompt && test $? -eq 0 || exit 1

    echo "  Make disk partitioin"
    sudo wipefs --all --force $BOX_DEVPART
    echo -e 'n\n \n \n \n \n p\n w\n' | sudo fdisk $DEV
    sudo mkfs.ext4 $BOX_DEVPART
    sudo e2label $BOX_DEVPART box
    test -e $BOX_DIR || sudo mkdir -p $BOX_DIR
    sudo mount $BOX_DEVPART $BOX_DIR
    sudo chown $USER:$USER -R $BOX_DIR
    rm -rf $BOX_DIR/*

    _init_fs_struct 0 && test $? -eq 0 || exit 1

    _init_save_git_creden
    _init_save_new_passwd
    _init_save_box_itself
}

box_set()
{
    printf "Set date and time: "
    DATE=$(curl -sI google.com | grep -i date | cut -f 3,4,5,6 -d ' ')
    printf '\n ' && sudo date --set="$DATE" && echo

    _set_devs
    _set_passwd
    _set_datalinks
    _set_update_session
}

box_utils()
{
    NAME=server
    IP=192.168.0.103
    PASSWD=server98
    DIR=/home/server/dgarb/shared

    (sudo systemctl | grep -q ssh.service) || sudo service ssh start

    case $1 in
        conn )
            sshpass -p $PASSWD ssh $NAME@$IP
            test $? -eq 6 && ssh server@$IP
            ;;
        send )
            printf "Enter dir/file name: " && read filepath

            if [[ -d $filepath || -f $filepath ]]; then
                sshpass -p $PASSWD scp -r $filepath server@$IP:$DIR
            else
                printf "scp: cannot access \`$filepath': "
                printf "No such file or directory\n"
                exit
            fi
            ;;
        pkgs )
            _util_pkgs
            ;;
        halt )
            _debug_reset
            sudo shutdown now
            ;;
    esac
}

box_clean()
{
    echo "Clean unnecessary garbage"

    echo " page cache, dentries and inodes"
    sudo sysctl vm.drop_caches=$1

    echo " browser metadata"
}

box_debug()
{
    echo "Debug"
    case $1 in 
        reset )
            _debug_reset ;;
    esac
}


_init_user_prompt()
{
    echo "Init disk partition"
    printf "  Device (default /dev/sdc): "   && read _DEV
    
    test -z $_DEV || DEV=$_DEV && test -b $DEV # && echo "OK $DEV" || echo "ERR $DEV"

    if [[ $? -eq 1 ]]; then
        echo -e "  Error: no such disk device \`$DEV'"
        return 1
    fi

    printf "  Do you want to format \`box\` disk partition? [y/N] " && read anw
    if [[ $anw != 'yes' ]]; then
        echo "Abort" && return 1
    fi

    if [[ -d $BOX_DIR ]]; then
        echo "  Warning: \`box\` partitioin exists already."
        printf "  Do you want to format \`box\` partitioin anyway? [y/N] " && read anw
        if [[ $anw != 'yes' ]]; then
            echo "Abort"
            return 1
        fi
        echo -e "\n  Format disk partitioin"
    fi
    return 0;
}
_init_fs_struct()
{
    if [[ $# -eq 0 ]]; then
        echo "Error: missing argument in _init_fs_struct"
        return 1
    fi

    if [[ $1 -eq 0 ]]; then
        echo "  Make system directories"
        for item in ${BOX_ROOT[@]}; do
            echo "$item" && mkdir -p $item;
        done
    fi
    echo "  Make user directories"
    for item in ${BOX_DIRS[@]}; do
        echo "$item" && mkdir -p $item;
    done
    for item in ${BOX_FILES[@]}; do
        echo "$item" && touch $item
    done
    echo
}
_init_save_new_passwd()
{
    printf "Default password: " && read _DEF_PASSWD
    printf "New password: "     && read _NEW_PASSWD

    if [[ $_DEF_PASSWD == '' || $_NEW_PASSWD == '' ]]; then
        echo -e "Error: password is empty\n"
        _init_save_new_passwd
    fi
    echo "$_DEF_PASSWD:$_NEW_PASSWD" > $BOX_HOME/.box-credentials
}
_init_save_git_creden()
{
    echo "Init git credentials"
    printf " git email  : " && read GIT_EMAIL
    printf " git name   : " && read GIT_NAME
    printf " git passwd : " && read GIT_PASSWD
    if [[ $GIT_EMAIL == '' || $GIT_NAME == '' || $GIT_PASSWD == '' ]]; then
        echo " email, name or password is empty"
        _init_save_git_creden
    fi
    git config --global user.email $GIT_EMAIL
    git config --global user.name  $GIT_NAME
    git config --global credential.helper store
    echo -e "https://$GIT_NAME:$GIT_PASSWD@github.com\n" > ${BOX_FILES[1]};
    echo
}
_init_save_box_itself()
{
    echo "    [-] box saving"
    cp $BOX $BOX_DIR/bin
    echo
}



_set_passwd()
{
    # set non-default passwd for more security
    echo "Set new password"
    echo -e "Warning: default password is used\n"
}
_set_datalinks()
{
    # make symbolic links
    echo "Make links to files"

    # delete some dirs
    rm -rf $HOME/.local
    rm -rf $HOME/Downloads

    for d in ${BOX_DIRS[@]}; do
        DEST=${d#"$BOX_HOME/"}
        test -e $HOME/$DEST || ln -s $BOX_HOME/$DEST $HOME/$DEST
        echo " $DEST"
    done
    for f in ${BOX_FILES[@]}; do
        DEST=${f#"$BOX_HOME/"}
        test -e $HOME/$DEST || ln -s $BOX_HOME/$DEST $HOME/$DEST
        echo " $DEST"
    done
    echo
}
_set_devs()
{
    echo "Set devices parameters"
    echo " keyboard"
    setxkbmap -option grp:alt_shift_toggle us,ru

    echo " monitor"
    xset s off # don't activate screensaver
    xset -dpms # disable DPMS (Energy Star) features.
    #xset s noblank # don't blank the video device
    xrandr | grep 'VGA-1 disconnected' -q
    if [[ $? -eq 1 ]];then
        xrandr --output LVDS-1 --off
    fi

    echo " stereo"
    pactl set-sink-mute   alsa_output.pci-0000_00_1b.0.analog-stereo 0
    pactl set-sink-volume alsa_output.pci-0000_00_1b.0.analog-stereo 70%
    echo
}
_set_update_session()
{
    # have to make some checking before update .bashrc
    # and system at all (deamons, .configs, etc)
    echo "Update session"
    if [[ $(grep  "# box part" ~/.bashrc) != '' ]]; then
        echo " terminal is already updated"
        return 0;
    fi
    echo " terminal"
    echo -e "\n# box part"             >> ~/.bashrc
    echo "PATH=$BOX_PATH"              >> ~/.bashrc
    echo "export PATH"                 >> ~/.bashrc
    echo "source $BOX_DIR/bin/box.sh"  >> ~/.bashrc
    sudo cp ~/.bashrc /root
    exec $SHELL
}


_util_pkgs()
{
    echo "Install user packages"
    SUBLIME_TEXT_URL=https://download.sublimetext.com
    SUBLIME_TEXT_TAR=sublime_text_3_build_3211_x32.tar.bz2
    TELEGRAM_URL=https://telegram.org/dl/desktop/linux32
    TELEGRAM_TAR=telegram.tar.xz
    PARTICLE_URL=https://github.com/qcockroach/particle/archive/main.zip
    PARTICLE_TAR=particle-main

    mkdir -p $BOX_LOCAL/bin
    wget -q --show-progress $SUBLIME_TEXT_URL/$SUBLIME_TEXT_TAR --output-document $SUBLIME_TEXT_TAR 
    tar -xf $SUBLIME_TEXT_TAR && rm -rf $SUBLIME_TEXT_TAR
    (mv sublime_text_3/* $BOX_LOCAL/bin || echo "package is already installed") && rm -rf sublime_text_3

    wget -q --show-progress $TELEGRAM_URL --output-document $TELEGRAM_TAR
    tar -xf $TELEGRAM_TAR && rm -rf $TELEGRAM_TAR
    (mv Telegram/* $BOX_LOCAL/bin || echo "package is already installed") && rm -rf Telegram

    wget -q --show-progress $PARTICLE_URL --output-document $PARTICLE_TAR.zip
    unzip -q $PARTICLE_TAR && cd $PARTICLE_TAR/wd
    make -s init && make -s && make -s install && cd ../..
    rm -rf $PARTICLE_TAR*

    printf "sshpass"
    sudo apt-get update
    sudo apt-get install sshpass -y
    echo
}


_debug_reset()
{
    echo "Unset symbolic links"
    for d in ${BOX_DIRS[@]}; do
        DEST=${d#"$BOX_HOME/"}
        test -L $DEST && unlink $DEST
        echo " $DEST"
    done
    for f in ${BOX_FILES[@]}; do
        DEST=${f#"$BOX_HOME/"}
        test -L $DEST && unlink $DEST
        echo " $DEST"
    done
}


# Interface
while getopts ":isd:c:hu:v" opt; do
    case ${opt} in
        i)
            box_init ;;
        s)
            box_set ;;
        c)
            box_clean $OPTARG ;;
        d)
            box_debug $OPTARG ;;
        h)
            box_usage ;;
        u)
            box_utils $OPTARG ;;
        v)
            echo "box (particle) $VERSION" ;;
        :)
            echo "Option -$OPTARG requires argument. Use option \`-h' for more information" ;;
       \?)
            echo "Unknown option character \`-$OPTARG'" ;;
    esac
done
if [[ $# -eq 0 ]]; then
    box_set
fi
