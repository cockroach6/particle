#!/bin/bash

<<<<<<< HEAD
ARCH=x32
DEV=/dev/sdc
USER=`whoami`
PASSWD=kali
BOX_DIR=/media/`whoami`/box
=======
# User defined variables
# Please, make sure you specified them for machine
# to avoid unnecessary problems

DEV=/dev/sdc                    # where your 'Live USB' mounted. Use fdisk for more info
USER=`whoami`                   # machine user name
PASSWD=kali                     # user password. You can change it for more security
BOX_DIR=/media/$USER/box        # path to your extended partition for saving data
>>>>>>> box2.3

BOX_DEVPART="$DEV"3
BOX_HOME=$BOX_DIR/home
BOX_BRW_DIR=$BOX_DIR/home/.config/chromium
BOX_LOCAL=$BOX_HOME/.local
BOX_PATH=$BOX_DIR/bin:$BOX_LOCAL/bin:\$PATH
BOX=$(echo $(pwd)$(find . -type f -name 'box') | tr -d '.')
VERSION=2.3
ARCH=x32

BOX_ROOT=(
	$BOX_DIR/bin
	$BOX_DIR/var
	$BOX_DIR/etc
	$BOX_DIR/home
)
BOX_DIRS=(
	$BOX_HOME/Downloads         # to not lose downloaded data after reboot machine
	$BOX_HOME/git               # rest of git repos
	$BOX_HOME/dump              # git repo where I save unfinished projects
	$BOX_HOME/.local            # user programs
	$BOX_HOME/.ssh
	$BOX_HOME/.config/chromium  # browser data
	$BOX_HOME/xunison           # projects for job
	$BOX_HOME/shared            # shared directory with my local server
)
BOX_FILES=(
	$BOX_HOME/.box-credentials  # config file for my box program
	$BOX_HOME/.git-credentials
	$BOX_HOME/.gitconfig
	$BOX_HOME/.wreck            # config file for my util program
)


<<<<<<< HEAD
_usage()
{
	echo "Usage: box [option]"
	echo "Options:"
	echo " -i                    make disk partition and directory structure"
	echo " -s                    set user's environment extensions"
	echo " -c                    clean machine RAM"
	echo " -d                    debug box to improve it"
	echo " -H                    wrapper for command shutdown"
	echo " -p                    download, compile and install user packages"
	echo " -u                    most friquently used utils"
=======
# system part
if [[ `uname -m` == 'i686' ]]; then
	ARCH=x32
else
	ARCH=x64
fi


box_usage()
{
	echo "Usage: box [option]"
	echo "Options:"
	echo " -i                    init box environment"
	echo " -s                    set box environment (by default)"
	echo " -c                    free box RAM memory"
	echo " -d                    debug box"
	echo " -r                    reset box changes"
	echo " -u                    user utils: conn, send, pkgs, halt"
>>>>>>> box2.3
	echo " -h                    give this help list"
	echo " -v                    show box version"
}


box_init()
{
<<<<<<< HEAD
	printf "Device (default /dev/sdc): "   && read _DEV
	test -z $_DEV || DEV=$_DEV
	test -e $DEV  || (echo -e "\nError: no such disk device \`$DEV'" && exit)
=======
	_init_user_prompt && test $? -eq 0 || exit 1
>>>>>>> box2.3

	echo "  Make disk partitioin"
	sudo wipefs --all --force $BOX_DEVPART
	echo -e 'n\n \n \n \n \n p\n w\n' | sudo fdisk $DEV
	sudo mkfs.ext4 $BOX_DEVPART
	sudo e2label $BOX_DEVPART box
	test -e $BOX_DIR || sudo mkdir -p $BOX_DIR
	sudo mount $BOX_DEVPART $BOX_DIR
	sudo chown $USER:$USER -R $BOX_DIR
	rm -rf $BOX_DIR/*

	_init_fs_struct 0 && test $? -eq 0 || exit 1

	_init_save_git_creden
	_init_save_new_passwd
	_init_save_box_itself
}

box_set()
{
	echo "[*] set date and time"
	DATE=$(curl -sI google.com | grep -i date | cut -f 3,4,5,6 -d ' ')
	printf "    [-] Date and Time: " && sudo date --set="$DATE" && echo

	_set_passwd && _set_datalinks && _set_devs
	sudo service ssh start

	# update bash session
	test $SHLVL -le 2 && exec $SHELL
}

box_utils()
{
	NAME=server
	IP=192.168.0.103
	PASSWD=server98
	DIR=/home/server/dgarb/shared

	case $1 in
		conn )
			sshpass -p $PASSWD ssh $NAME@$IP
			test $? -eq 6 && ssh server@$IP
			;;
		send )
			printf "Enter file path: " && read filepath

			if [[ -d $filepath || -f $filepath ]]; then
				sshpass -p $PASSWD scp -r $filepath server@$IP:$DIR
			else
				echo "scp: cannot access '$filepath': No such file or directory" && exit
			fi
			;;
		pkgs )
			_util_pkgs
			;;
		halt )
			sudo shutdown now
			;;
	esac
	#unset $NAME, $IP, $PASSWD, $DIR
}

box_clean()
{
	echo "[*] clean unnecessary garbage"

	echo "PageCashe, Dentries and inodes"
	sudo sysctl vm.drop_caches=$1

	echo "Browser metadata"
}

box_debug()
{
	echo "[*] debug"
}

box_reset()
{
	echo "[*] reset"
	for d in ${BOX_DIRS[@]}; do
		DEST=${d#"$BOX_HOME/"}
		echo $DEST
		unlink $DEST
	done
	for f in ${BOX_FILES[@]}; do
		DEST=${f#"$BOX_HOME/"}
		echo $DEST
		unlink $DEST
	done
}



_init_user_prompt()
{
	echo "[*] init disk partition"
	printf "  Device (default /dev/sdc): "   && read _DEV
	
	test -z $_DEV || DEV=$_DEV && test -b $DEV # && echo "OK $DEV" || echo "ERR $DEV"

	if [[ $? -eq 1 ]]; then
		echo -e "  Error: no such disk device \`$DEV'"
		return 1
	fi

	printf "  Do you want to format \`box\` disk partition? [y/N] " && read anw
	if [[ $anw != 'yes' ]]; then
		echo "Abort" && return 1
	fi

	if [[ -d $BOX_DIR ]]; then
		echo "  Warning: \`box\` partitioin exists already."
		printf "  Do you want to format \`box\` partitioin anyway? [y/N] " && read anw
		if [[ $anw != 'yes' ]]; then
			echo "Abort"
			return 1
		fi
		echo -e "\n  Format disk partitioin"
	fi
}
_init_fs_struct()
{
	if [[ $# -eq 0 ]]; then
		echo "Error: missing argument in _init_fs_struct"
		return 1
	fi

	if [[ $1 -eq 0 ]]; then
		echo "  Make system directories"
		for item in ${BOX_ROOT[@]}; do
			echo "$item" && mkdir -p $item;
		done
	fi
	echo "  Make user directories"
	for item in ${BOX_DIRS[@]}; do
		echo "$item" && mkdir -p $item;
	done
	for item in ${BOX_FILES[@]}; do
		echo "$item" && touch $item
	done
	echo
}
_init_save_new_passwd()
{
	printf "Default password: "            && read _DEF_PASSWD
	printf "New password: "                && read _NEW_PASSWD

	if [[ $_DEF_PASSWD == '' || $_NEW_PASSWD == '' ]]; then
		echo -e "Error: password is empty\n"
		_init_save_new_passwd
	fi
	echo "$_DEF_PASSWD:$_NEW_PASSWD" > $BOX_HOME/.box-credentials
}
_init_save_git_creden()
{
	echo "    [-] init git credentials"
	printf "git email  : " && read GIT_EMAIL
	printf "git name   : " && read GIT_NAME
	printf "git passwd : " && read GIT_PASSWD
	if [[ $GIT_EMAIL == '' || $GIT_NAME == '' || $GIT_PASSWD == '' ]]; then
		echo "email, name or password is empty"
		_init_save_git_creden
	fi
	git config --global user.email $GIT_EMAIL
	git config --global user.name  $GIT_NAME
	git config --global credential.helper store
	echo -e "https://$GIT_NAME:$GIT_PASSWD@github.com\n" > ${BOX_FILES[1]};
	echo
}
_init_save_box_itself()
{
	echo "    [-] box saving"
	cp $BOX $BOX_DIR/bin
	echo
}



_set_passwd()
{
	# set non-default passwd for more security
	echo "[*] set new password"
	echo
}
_set_datalinks()
{
	# make symbolic links
	echo "[*] datalinks"
	echo "    [-] update .bashrc file"
	echo -e "\n\n# box's change" >> ~/.bashrc
	echo "PATH=$BOX_PATH && export PATH" >> ~/.bashrc
	test -e $BOX_LOCAL/bin/wd.sh && echo "source $BOX_LOCAL/bin/wd.sh" >> ~/.bashrc
	sudo cp ~/.bashrc /root

	# delete some dirs
	rm -rf $HOME/.local
	rm -rf $HOME/Downloads

	for d in ${BOX_DIRS[@]}; do
		DEST=${d#"$BOX_HOME/"}
		test -e $HOME/$DEST || ln -s $BOX_HOME/$DEST $HOME/$DEST
		echo "    [@] $DEST"
	done
	for f in ${BOX_FILES[@]}; do
		DEST=${f#"$BOX_HOME/"}
		test -e $HOME/$DEST || ln -s $BOX_HOME/$DEST $HOME/$DEST
		echo "    [@] $DEST"
	done
	echo
}
_set_devs()
{
	# set user's device parameters
	# on keyboard, monitor, mic, stereo, etc
	echo "[*] set user's devices parameters"
	echo "    [-] keyboard"
	setxkbmap -option grp:alt_shift_toggle us,ru

	echo "    [-] monitor"
	xset s off # don't activate screensaver
	xset -dpms # disable DPMS (Energy Star) features.
	#xset s noblank # don't blank the video device
	xrandr | grep 'VGA-1 disconnected' -q
	if [[ $? -eq 1 ]];then
		xrandr --output LVDS-1 --off
	fi

	echo "    [-] stereo"
	pactl set-sink-mute   alsa_output.pci-0000_00_1b.0.analog-stereo 0
	pactl set-sink-volume alsa_output.pci-0000_00_1b.0.analog-stereo 70%
	echo
}



# download and install user pkgs
_util_pkgs()
{
	echo "[*] user pkgs"
	SUBLIME_TEXT_URL=https://download.sublimetext.com
	SUBLIME_TEXT_TAR=sublime_text_3_build_3211_$ARCH.tar.bz2
	TELEGRAM_URL=https://telegram.org/dl/desktop/linux32
	TELEGRAM_TAR=telegram.tar.xz
	PARTICLE_URL=https://github.com/qcockroach/particle/archive/main.zip
	PARTICLE_TAR=particle-main


	if [[ $ARCH != 'x32' ]]; then
		SUBLIME_TEXT_TAR=sublime_text_3_build_3211_x64.tar.bz2
		TELEGRAM_URL=https://telegram.org/dl/desktop/linux
	fi

	mkdir -p $BOX_LOCAL/bin

	wget -q --show-progress $SUBLIME_TEXT_URL/$SUBLIME_TEXT_TAR --output-document $SUBLIME_TEXT_TAR 
	tar -xf $SUBLIME_TEXT_TAR && rm -rf $SUBLIME_TEXT_TAR
	(mv sublime_text_3/* $BOX_LOCAL/bin || echo "app's already installed") && rm -rf sublime_text_3

	wget -q --show-progress $TELEGRAM_URL --output-document $TELEGRAM_TAR
	tar -xf $TELEGRAM_TAR && rm -rf $TELEGRAM_TAR
	(mv Telegram/* $BOX_LOCAL/bin || echo "app's already installed") && rm -rf Telegram

	wget -q --show-progress $PARTICLE_URL --output-document $PARTICLE_TAR.zip
	unzip -q $PARTICLE_TAR && cd $PARTICLE_TAR/wd
	make -s init && make -s && make -s install && cd ../..
	rm -rf $PARTICLE_TAR*

<<<<<<< HEAD
_user_utils()
{
	sshpass -p "server98" ssh server@192.168.0.103
	test $? -eq 6 && ssh server@192.168.0.103
}


box_clean()
{
	echo "[*] clean machine RAM"
}


box_debug()
{
	echo "[*] debug box"
}


box_halt()
{
	echo '[*] halt machine'
	sudo shutdown now
=======
	printf "sshpass"
	sudo apt-get update && sudo apt-get install sshpass -y
>>>>>>> box2.3
}


# Interface
<<<<<<< HEAD
while getopts ":iscHdpuhv" opt; do
case ${opt} in
	i)
		box_init ;;
	s)
		box_set ;;
	c)
		box_clean ;;
	d)
		box_debug ;;
	H)
		box_halt ;;
	p)
		_pkgs ;;
	u)
		_user_utils ;;
	h)
		_usage ;;
	v)
		echo "box (particle) $VERSION" ;;
   \?)
		echo "Unknown option character \`-"$OPTARG"\`";;
esac
done
=======
while getopts ":isdrc:hu:v" opt; do
	case ${opt} in
		i)
			box_init ;;
		s)
			box_set ;;
		c)
			box_clean $OPTARG ;;
		r)
			box_reset ;;
		d) 
			box_debug ;;
		h)
			box_usage ;;
		u)
			box_utils $OPTARG ;;
		v)
			echo "box (particle) $VERSION" ;;
		:)
			echo "Option -$OPTARG requires argument. Use option \`-h' for more information" ;;
	   \?)
			echo "Unknown option character \`-$OPTARG'" ;;
	esac
done
if [[ $# -eq 0 ]]; then
	box_set
fi
>>>>>>> box2.3
